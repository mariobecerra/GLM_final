model {
  for(i in 1:n) {
    y[i] ~ dnorm(mu[i], tau.y[zip_code[i]]) 
    mu[i] <-  alpha[zip_code[i]] + 
              beta_1[zip_code[i]]*x[i] 
  }
  
  for(j in 1:n_zip){
    alpha[j] ~ dnorm(mu.a[neighborhood[j]], tau.a[neighborhood[j]])
    beta_1[j] ~ dnorm(mu.b1[neighborhood[j]], tau.b1[neighborhood[j]])
    tau.y[j] ~ dgamma(alpha.y[borough[j]], beta.y[borough[j]])
  }
  
  for(j in 1:n_neighborhood){
    mu.a[j] ~ dnorm(mu.a.1[borough[j]], tau.a.1[borough[j]])
    tau.a[j] ~ dexp(lambda.a.1[borough[j]])
    mu.b1[j] ~ dnorm(mu.b1.1[borough[j]], tau.b1.1[borough[j]])
    tau.b1[j] ~ dexp(lambda.b1.1[borough[j]])
    alpha.y[j] ~ dexp(lambda.alpha.y[borough[j]])
    beta.y[j] ~ dexp(lambda.beta.y[borough[j]])
  }
  
  for(j in 1:n_borough){
    mu.a.1[j] ~ dnorm(mu.a.1.0, tau.a.1.0)
    tau.a.1[j] ~ dexp(lambda.a.tau.0)
    lambda.a.1[j] ~ dexp(lambda.a.0)
    
    mu.b1.1[j] ~ dnorm(mu.b1.1.0, tau.b1.1.0)
    tau.b1.1[j] ~ dexp(lambda.b1.tau.0)
    lambda.b1.1[j] ~ dexp(lambda.b1.0)
    
    lambda.alpha.y[j] ~ dexp(lambda.lambda.alpha.y)
    lambda.beta.y[j] ~ dexp(lambda.lambda.beta.y)
  }
  
  mu.a.1.0 ~ dnorm(0, 0.0001)
  tau.a.1.0 ~ dgamma(0.01, 0.01)
  lambda.a.tau.0 ~ dgamma(0.01, 0.01)
  lambda.a.0 ~ dgamma(0.01, 0.01)
  mu.b1.1.0 ~ dnorm(0, 0.0001)
  tau.b1.1.0 ~ dgamma(0.01, 0.01)
  lambda.b1.tau.0 ~ dgamma(0.01, 0.01)
  lambda.b1.0 ~ dgamma(0.01, 0.01)
  lambda.lambda.alpha.y ~ dgamma(0.01, 0.01)
  lambda.lambda.beta.y ~ dgamma(0.01, 0.01)
  
  # Train predictions
  for(i in 1:n){
    yf[i] ~ dnorm(mu[i], tau.y[zip_code[i]]) 
  }
  
  # Test predictions
  for(i in 1:n_test){
    yf_test[i] ~ dnorm(mu_test[i], tau.y[zip_code_test[i]]) 
    mu_test[i] <- alpha[zip_code_test[i]] + 
                  beta_1[zip_code_test[i]]*x_test[i] 
  }

}