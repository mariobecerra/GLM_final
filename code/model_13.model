model {
  for(i in 1:n) {
    y[i] ~ dnorm(mu[i], tau.y) 
    mu[i] <-  alpha[zip_code[i]] + 
              beta_1[zip_code[i]]*x[i] + 
              beta_2[zip_code[i]]*building_class[i] + 
              beta_3[zip_code[i]]*building_class[i]*x[i]
  }
  tau.y ~ dgamma(0.001, 0.001)
  
  for(j in 1:n_zip){
    alpha[j] ~ dnorm(mu.a[borough[j]], tau.a[borough[j]])
    beta_1[j] ~ dnorm(mu.b1[borough[j]], tau.b1[borough[j]])
    beta_2[j] ~ dnorm(mu.b2[borough[j]], tau.b2[borough[j]])
    beta_3[j] ~ dnorm(mu.b3[borough[j]], tau.b3[borough[j]])
  }
  
  for(z in 1:n_borough){
    mu.a[z] ~ dnorm(mu.0.a, tau.a.0)
    mu.b1[z] ~ dnorm(mu.0.b1, tau.0.b1)
    mu.b2[z] ~ dnorm(mu.0.b2, tau.0.b2)
    mu.b3[z] ~ dnorm(mu.0.b3, tau.0.b3)
    tau.a[z] ~ dexp(lambda.a)
    tau.b1[z] ~dexp(lambda.b1)
    tau.b2[z] ~dexp(lambda.b2)
    tau.b3[z] ~ dexp(lambda.b3)
  }
  
  mu.0.a ~ dnorm(0, 0.0001)
  lambda.a ~ dgamma(0.001, 0.001)
  mu.0.b1 ~ dnorm(0, 0.0001)
  lambda.b1 ~ dgamma(0.001, 0.001)
  mu.0.b2 ~ dnorm(0, 0.0001)
  lambda.b2 ~ dgamma(0.001, 0.001)
  mu.0.b3 ~ dnorm(0, 0.0001)
  lambda.b3 ~ dgamma(0.001, 0.001)
  tau.a.0 ~ dgamma(0.001, 0.001)
  tau.0.b1 ~ dgamma(0.001, 0.001)
  tau.0.b2 ~ dgamma(0.001, 0.001)
  tau.0.b3 ~ dgamma(0.001, 0.001)
  
  # Train predictions
  for(i in 1:n){
    yf[i] ~ dnorm(mu[i], tau.y) 
  }
  
  # Test predictions
  for(i in 1:n_test){
    yf_test[i] ~ dnorm(mu_test[i], tau.y) 
    mu_test[i] <- alpha[zip_code_test[i]] + 
                  beta_1[zip_code_test[i]]*x_test[i] + 
                  beta_2[zip_code_test[i]]*building_class_test[i] + 
                  beta_3[zip_code_test[i]]*building_class_test[i]*x_test[i]
  }

}